import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters
from analyze_all import NganasanMorphAnalyzer


logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)


class NganasanBot:
    def __init__(self, token):
        self.token = token
        self.analyzer = NganasanMorphAnalyzer()

    async def start(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞ –Ω–≥–∞–Ω–∞—Å–∞–Ω—Å–∫–∏—Ö —Å–ª–æ–≤.\n"
            "–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Å–ª–æ–≤–æ –Ω–∞ –Ω–≥–∞–Ω–∞—Å–∞–Ω—Å–∫–æ–º, –∏ —è –µ–≥–æ —Ä–∞–∑–±–µ—Ä—É.\n\n"
        )
        await update.message.reply_text(welcome_text)

    async def help_command(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = (
            "üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
            "1. –ü—Ä–∏—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–ª–æ–≤–æ –Ω–∞ –Ω–≥–∞–Ω–∞—Å–∞–Ω—Å–∫–æ–º —è–∑—ã–∫–µ\n"
            "2. –ë–æ—Ç –≤–µ—Ä–Ω–µ—Ç –µ–≥–æ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã—Ö —á–∞—Å—Ç–µ–π —Ä–µ—á–∏:\n"
            "- –°—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ: —Ç–∞–∞, —Ç–∞–∞–≥–∞–π, –¥–µ—Å—å–º—ë\n"
            "- –ì–ª–∞–≥–æ–ª—ã: —Ç—É\"–æ–º, —Ç—É–π—Å—É–∑”ô–º\n"
            "- –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è: –º”ô–Ω–µ, –Ω–æ–Ω”ô–Ω—Ç–µ\n"
            "- –ß–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ: —Å–∏—Ç—Ç–∏"
        )
        await update.message.reply_text(help_text)

    async def example_command(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /example"""
        examples = {
            "—Ç–∞–∞": "NOUN, nom.sg - '–æ–ª–µ–Ω—å'",
            "—Ç–∞–∞–≥–∞–π": "NOUN, dl - '–¥–≤–∞ –æ–ª–µ–Ω—è'",
            "—Ç—É\"–æ–º": "VERB, past.1sg - '—è –ø—Ä–∏—à–µ–ª'",
            "–º”ô–Ω–µ": "PRON, 1sg - '—è'"
        }
        response = "üìö –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–∑–±–æ—Ä–∞:\n\n" + "\n".join(
            f"‚Ä¢ {word}: {analysis}" for word, analysis in examples.items()
        )
        await update.message.reply_text(response)

    async def analyze_word(self, update: Update, context):
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–ª–æ–≤"""
        word = update.message.text.strip()

        # –£–±–∏—Ä–∞–µ–º –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
        clean_word = word.rstrip('?')

        try:
            analysis = self.analyzer.analyze(clean_word)
            response = self.format_analysis(word, analysis)
        except Exception as e:
            logging.error(f"Error analyzing {word}: {e}")
            response = f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Å–ª–æ–≤–æ '{word}'\n–û—à–∏–±–∫–∞: {str(e)}"

        await update.message.reply_text(response)

    def format_analysis(self, word, analysis):
        pos = analysis.get('pos', 'UNKN')
        features = analysis.get('features', {})
        stem = analysis.get('stem', '')
        features_str = ", ".join(
            f"{k}: {v}" for k, v in features.items()
            if v not in ('', None)
        )

        # –ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —á–∞—Å—Ç–µ–π —Ä–µ—á–∏
        if pos == 'NOUN':
            response = f"üìå {word} ‚Äî —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ\n"
            if stem:
                response += f"–û—Å–Ω–æ–≤–∞: {stem}\n"
            if features_str:
                response += f"–ì—Ä–∞–º–º–µ–º—ã: {features_str}"

        elif pos == 'VERB':
            response = f"üîß {word} ‚Äî –≥–ª–∞–≥–æ–ª\n"
            if features_str:
                response += f"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {features_str}"

        elif pos == 'PRON':
            response = f"üí¨ {word} ‚Äî –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ\n"
            if features_str:
                response += f"–¢–∏–ø: {features_str}"

        elif pos == 'NUM':
            response = f"üî¢ {word} ‚Äî —á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–µ\n"
            if features_str:
                response += f"–†–∞–∑–±–æ—Ä: {features_str}"

        else:
            response = f"‚ùì {word} ‚Äî –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å—Ç—å —Ä–µ—á–∏\n"
            if features_str:
                response += f"–ù–∞–π–¥–µ–Ω—ã –ø—Ä–∏–∑–Ω–∞–∫–∏: {features_str}"

        return response

    def run(self):
        application = Application.builder().token(self.token).build()
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("example", self.example_command))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.analyze_word))
        application.run_polling()


if __name__ == '__main__':
    BOT_TOKEN = "8090913723:AAGwsr0ftwvwsKLTR_xoouyF1804b30-WLw"

    bot = NganasanBot(BOT_TOKEN)
    bot.run()